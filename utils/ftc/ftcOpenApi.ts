/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/v2.0/{season}/advancement/{eventCode}": {
    /**
     * Event Advancement
     * @description The event advancement endpoint returns details about teams advancing from a particular event in a particular season.
     */
    get: {
      parameters: {
        query?: {
          /** @description `excludeSkipped=true` to exclude skipped advancement slots. Slots are skipped if no team meets the criteria, the team has already advanced, or the team was ineligible. */
          excludeSkipped?: boolean;
        };
        path: {
          /** @description Numeric year of the event from which the event advancement is requested. Must be 4 digits > 2022 */
          season: number;
          /** @description Case insensitive alphanumeric `eventCode` of the event from which the advancement results are requested. Must be at least 3 characters. */
          eventCode: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["AdvancementModel"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
      };
    };
  };
  "/v2.0/{season}/advancement/{eventCode}/source": {
    /**
     * Advancement Source
     * @description The advancement source API returns details about where teams advanced to a specified event from.
     */
    get: {
      parameters: {
        path: {
          /** @description Numeric year of the event from which the advancement is requested. Must be 4 digits >= 2022 */
          season: number;
          /** @description Case insensitive alphanumeric `eventCode` of the event for which teams advanced to. Must be at least 3 characters. */
          eventCode: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["AdvancementSourceModel"][];
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
      };
    };
  };
  "/v2.0/{season}/leagues": {
    /**
     * League Listings
     * @description The league listings API returns all FTC leagues in a particular season. You can specify a `regionCode` to filter to leagues within a particular region. To filter to a specific league, supply both a `regionCode` and a `leagueCode`. The returned objects have a `parentLeagueCode` field, which indicates the league is a child league if not null and provides the code of the parent league. The `regionCode` of the parent league will always match the child.
     */
    get: {
      parameters: {
        query?: {
          /** @description Case-sensitive alphanumeric `regionCode` of a region to filter for. */
          regionCode?: string;
          /** @description Case-sensitive alphanumeric `leagueCode` of the league within the specified region to query. */
          leagueCode?: string;
        };
        path: {
          /** @description Numeric year from which the league listings are requested. Must be 4 digits */
          season: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["SeasonLeagueListingsModel_Version2"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
      };
    };
  };
  "/v2.0/{season}/leagues/members/{regionCode}/{leagueCode}": {
    /**
     * League Membership
     * @description The league membership API returns the list of team numbers for the teams that are members of a particular league. Leagues are specified by a `regionCode` in combination with a `leagueCode`.
     */
    get: {
      parameters: {
        path: {
          /** @description Numeric year. Must be 4 digits */
          season: number;
          /** @description Case sensitive alphanumeric `regionCode` of the region the league belongs to. */
          regionCode: string;
          /** @description Case sensitive alphanumeric `leagueCode` of the league. */
          leagueCode: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["LeagueMemberListModel"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
      };
    };
  };
  "/v2.0/{season}/leagues/rankings/{regionCode}/{leagueCode}": {
    /**
     * League Rankings
     * @description The league rankings API returns team ranking detail from a particular league in a particular season. League rankings are only the cumulative rankings from League Meets - they do not include performance at the League Tournament. To get League Tournament Rankings, use the Event Rankings endpoint.
     */
    get: {
      parameters: {
        path: {
          /** @description Numeric year. Must be 4 digits */
          season: number;
          /** @description Case sensitive alphanumeric `regionCode` of the region the league belongs to. */
          regionCode: string;
          /** @description Case sensitive alphanumeric `leagueCode` of the league. */
          leagueCode: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["EventRankingsModel"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
      };
    };
  };
  "/v2.0": {
    /**
     * API Index
     * @description Root level call with no parameters.
     */
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["ApiIndexModel"];
          };
        };
      };
    };
  };
  "/v2.0/{season}": {
    /**
     * Season Summary
     * @description The season summary API returns a high level glance of a particular FTC season.
     */
    get: {
      parameters: {
        path: {
          /** @description Numeric year of the event from which the season summary is requested. Must be 4 digits. */
          season: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["SeasonSummaryModel_Version2"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
      };
    };
  };
  "/v2.0/{season}/events": {
    /**
     * Event Listings
     * @description The event listings API returns all FTC official regional events in a particular season. You can specify an `eventCode` if you would only like data about one specific event. If you specify an `eventCode` you cannot specify any other optional parameters. Alternately, you can specify a `teamNumber` to retrieve only the listings of events being attended by the particular team. If you specify a `teamNumber` you cannot specify an `eventCode`.
     *
     * The response for event listings contains a special field called divisionCode. For example, the FIRST Championship contains two Divisions. As an example of a response, the event listings for a Division will have a divisionCode that matches the FIRST Championship event code (as they are divisions of that event). This allows you to see the full structure of events, and how they relate to each other.
     */
    get: {
      parameters: {
        query?: {
          /** @description Case insensitive alphanumeric `eventCode` of the event about which details are requested. */
          eventCode?: string;
          /** @description Numeric `teamNumber` of the team from which the attending event listings are requested. */
          teamNumber?: number;
        };
        path: {
          /** @description Numeric year from which the event listings are requested. Must be 4 digits */
          season: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["SeasonEventListingsModel_Version2"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
      };
    };
  };
  "/v2.0/{season}/teams": {
    /**
     * Team Listings
     * @description The team listings API returns all FTC official teams in a particular season. If specified, the `teamNumber` parameter will return only one result with the details of the requested `teamNumber`. Alternately, the `eventCode` parameter allows sorting of the team list to only those teams attending a particular event in the particular season. If you specify a teamNumber parameter, you cannot additionally specify an `eventCode` and/or `state` in the same request, or you will receive an HTTP 501. If you specify the `state` parameter, it should be the full legal name of the US state or international state/prov, such as New Hampshire or Ontario. Values on this endpoint are "pass through" values from the TIMS registration system. As such, if the team does not specify a value for a field, it may be presented in the API as null.
     */
    get: {
      parameters: {
        query?: {
          /** @description Numeric `teamNumber` of the team about which information is requested. Must be 1 to 5 digits. */
          teamNumber?: number;
          /** @description Case insensitive alphanumeric `eventCode` of the event from which details are requested. */
          eventCode?: string;
          /** @description Full legal name of the US state or international state/prov */
          state?: string;
          /** @description Numeric page of results to return. */
          page?: number;
        };
        path: {
          /** @description Numeric year from which the team listings are requested. Must be 4 digits. */
          season: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["SeasonTeamListingsModel_Version2"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
      };
    };
  };
  "/v2.0/{season}/schedule/{eventCode}/{tournamentLevel}/hybrid": {
    /**
     * Hybrid Schedule
     * @description The schedule API returns the match schedule for the desired tournament level of a particular event in a particular season in the hybrid format. When a match has been played, the match result related details will be filled. When a match has not yet happened, match result related fields will be null. All parameters, except start and end, are required for the hybrid schedule.
     */
    get: {
      parameters: {
        query?: {
          /** @description `start` match number for subset of results to return (inclusive). */
          start?: number;
          /** @description `end` match number for subset of results to return (inclusive). */
          end?: number;
        };
        path: {
          /** @description Numeric year of the event from which the hybrid schedule is requested. Must be 4 digits */
          season: number;
          /** @description Case insensitive alphanumeric eventCode of the event from which the hybrid schedule is requested. Must be at least 3 characters. */
          eventCode: string;
          /** @description Required tournamentLevel of desired score details. */
          tournamentLevel: "qual" | "playoff";
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["EventScheduleHybridModel_Version2"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
      };
    };
  };
  "/v2.0/{season}/schedule/{eventCode}": {
    /**
     * Event Schedule
     * @description The schedule API returns the match schedule for the desired tournament level of a particular event in a particular season. You must also specify a `tournamentLevel` from which to return the results. Alternately, you can specify a `teamNumber` to filter the results to only those in which a particular team is participating. There is no validation that the `teamNumber` you request is actually competing at the event, if they are not, the response will be empty. You can also specify the parameters together, but cannot make a request without at least one of the two.
     */
    get: {
      parameters: {
        query?: {
          /** @description Required tournamentLevel of desired score details. */
          tournamentLevel?: "qual" | "playoff";
          /** @description `teamNumber` to search for within the schedule. Only returns matches in which the requested team participated. */
          teamNumber?: number;
          /** @description `start` match number for subset of results to return (inclusive). */
          start?: number;
          /** @description `end` match number for subset of results to return (inclusive). */
          end?: number;
        };
        path: {
          /** @description Numeric year of the event from which the schedule is requested. Must be 4 digits */
          season: number;
          /** @description Case insensitive alphanumeric `eventCode` of the event from which the schedule are requested. Must be at least 3 characters. */
          eventCode: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["EventScheduleModel_Version2"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
      };
    };
  };
  "/v2.0/{season}/rankings/{eventCode}": {
    /**
     * Event Rankings
     * @description The rankings API returns team ranking detail from a particular event in a particular season. Optionally, the `top` parameter can be added to the query string to request a subset of the rankings based on the highest ranked teams at the time of the request. Alternately, you can specify the `teamNumber` parameter to retrieve the ranking on one specific team. You cannot specify both a `top` and `teamNumber` in the same call.
     */
    get: {
      parameters: {
        query?: {
          /** @description Team number of the team whose ranking is requested. */
          teamNumber?: number;
          /** @description number of requested `top` ranked teams to return in result. */
          top?: number;
        };
        path: {
          /** @description Numeric year of the event from which the rankings are requested. Must be 4 digits */
          season: number;
          /** @description Case insensitive alphanumeric `eventCode` of the event from which the rankings are requested. Must be at least 3 characters. */
          eventCode: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["EventRankingsModel"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
      };
    };
  };
  "/v2.0/{season}/alliances/{eventCode}": {
    /**
     * Event Alliances
     * @description The alliances API returns details about alliance selection at a particular event in a particular season.
     */
    get: {
      parameters: {
        path: {
          /** @description Numeric year of the event from which the event alliances are requested. Must be 4 digits. */
          season: number;
          /** @description Case insensitive alphanumeric `eventCode` of the event from which the alliance selection results are requested. Must be at least 3 characters. */
          eventCode: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["AllianceSelectionModel_Version2"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
      };
    };
  };
  "/v2.0/{season}/alliances/{eventCode}/selection": {
    /**
     * Alliance Selection Details
     * @description This returns the in-order details of each step through the alliance selection process for a particular event.
     */
    get: {
      parameters: {
        path: {
          /** @description Numeric year of the event from which the event alliances are requested. Must be 4 digits. */
          season: number;
          /** @description Case insensitive alphanumeric `eventCode` of the event from which the alliance selection results are requested. Must be at least 3 characters. */
          eventCode: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["AllianceSelectionDetailModel"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
      };
    };
  };
  "/v2.0/{season}/matches/{eventCode}": {
    /**
     * Event Match Results
     * @description The match results API returns the match results for all matches of a particular event in a particular season. Match results are only available once a match has been played, retrieving info about future matches requires the event schedule API. You cannot receive data about a match that is in progress. You can, however, request the Hybrid Schedule if you would like data about upcoming and played matches at the same time.
     *
     * If you specify the `matchNumber`, `start` and/or `end` optional parameters, you must also specify a `tournamentLevel`. If you specify the `teamNumber` parameter, you cannot specify a `matchNumber` parameter. If you specify the `matchNumber`, you cannot define a start or end.
     *
     * Note: If you specify `start`, and it is higher than the maximum match number at the event, you will not receive any match results in the response. The same is true in reverse for the `end` parameter.
     */
    get: {
      parameters: {
        query?: {
          /** @description Required tournamentLevel of desired score details. */
          tournamentLevel?: "qual" | "playoff";
          /** @description `teamNumber` to search for within the results. Only returns match results in which the requested team was a participant. */
          teamNumber?: number;
          /** @description specific single `matchNumber` of result. */
          matchNumber?: number;
          /** @description `start` match number for subset of results to return. */
          start?: number;
          /** @description `end` match number for subset of results to return (inclusive). */
          end?: number;
        };
        path: {
          /** @description Numeric year of the event from which the match results are requested. Must be 4 digits. */
          season: number;
          /** @description Case insensitive alphanumeric `eventCode` of the event from which the results are requested. Must be at least 3 characters. */
          eventCode: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["EventMatchResultsModel_Version2"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
      };
    };
  };
  "/v2.0/{season}/scores/{eventCode}/{tournamentLevel}": {
    /**
     * Score Details
     * @description The score details API returns the score detail for all matches of a particular event in a particular season and a particular tournament level. Score details are only available once a match has been played, retrieving info about future matches requires the event schedule API. You cannot receive data about a match that is in progress.
     */
    get: {
      parameters: {
        query?: {
          /** @description `teamNumber` to search for within the results. Only returns details in which the requested team was a participant. */
          teamNumber?: number;
          /** @description specific single `matchNumber` of result. */
          matchNumber?: number;
          /** @description `start` match number for subset of results to return (inclusive). */
          start?: number;
          /** @description `end` match number for subset of results to return (inclusive). */
          end?: number;
        };
        path: {
          /** @description Numeric year of the event from which the match results are requested. Must be 4 digits. */
          season: number;
          /** @description Case insensitive alphanumeric eventCode of the event from which the details are requested. Must be at least 3 characters. */
          eventCode: string;
          /** @description Required tournamentLevel of desired score details. */
          tournamentLevel: "qual" | "playoff";
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["MatchScoresModel"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
      };
    };
  };
  "/v2.0/{season}/awards/list": {
    /**
     * Award Listings
     * @description The award listings API returns a listing of the various awards that can be distributed in the requested season. This is especially useful in order to avoid having to use the name field of the event awards API to know which award was won. Instead the awardId field can be matched between the two APIs.
     */
    get: {
      parameters: {
        path: {
          /** @description Numeric year of the event from which the award listings are requested. Must be 4 digits */
          season: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["SeasonAwardListingsModel"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
      };
    };
  };
  "/v2.0/{season}/awards/{teamNumber}": {
    /**
     * Event Awards
     * @description The event awards API returns details about awards presented at a particular event in a particular season. Return values may contain either `teamNumber` or `person` values, and if the winner was a `person`, and that person is from a team, the `teamNumber` value *might* be set with their `teamNumber`. You must specify either an `eventCode` or a `teamNumber` or both. If you specify the `teamNumber` parameter, you will receive only awards where the team was listed as the winner, regardless of whether or not the `person` field is `null` or empty. If you specify only the `eventCode` field, you will receive all award listings for the requested event. If you specify both, you will receive all awards won by the `teamNumber` at the `eventCode`.
     */
    get: {
      parameters: {
        query?: {
          /** @description Case insensitive alphanumeric `eventCode` of the event from which the awards are requested. */
          eventCode?: string;
        };
        path: {
          /** @description Numeric year of the event from which the award listings are requested. Must be 4 digits */
          season: number;
          /** @description `teamNumber` to search for within the results. */
          teamNumber: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["AwardsModel"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
      };
    };
  };
  "/v2.0/{season}/awards/{eventCode}/{teamNumber}": {
    /**
     * Event Awards
     * @description The event awards API returns details about awards presented at a particular event in a particular season. Return values may contain either `teamNumber` or `person` values, and if the winner was a `person`, and that person is from a team, the `teamNumber` value *might* be set with their `teamNumber`. You must specify either an `eventCode` or a `teamNumber` or both. If you specify the `teamNumber` parameter, you will receive only awards where the team was listed as the winner, regardless of whether or not the `person` field is `null` or empty. If you specify only the `eventCode` field, you will receive all award listings for the requested event. If you specify both, you will receive all awards won by the `teamNumber` at the `eventCode`.
     */
    get: {
      parameters: {
        path: {
          /** @description Numeric year of the event from which the award listings are requested. Must be 4 digits */
          season: number;
          /** @description Case insensitive alphanumeric `eventCode` of the event from which the awards are requested. */
          eventCode: string;
          /** @description `teamNumber` to search for within the results. */
          teamNumber: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["AwardsModel"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
      };
    };
  };
  "/v2.0/{season}/awards/{eventCode}": {
    /**
     * Event Awards
     * @description The event awards API returns details about awards presented at a particular event in a particular season. Return values may contain either `teamNumber` or `person` values, and if the winner was a `person`, and that person is from a team, the `teamNumber` value *might* be set with their `teamNumber`. You must specify either an `eventCode` or a `teamNumber` or both. If you specify the `teamNumber` parameter, you will receive only awards where the team was listed as the winner, regardless of whether or not the `person` field is `null` or empty. If you specify only the `eventCode` field, you will receive all award listings for the requested event. If you specify both, you will receive all awards won by the `teamNumber` at the `eventCode`.
     */
    get: {
      parameters: {
        query?: {
          /** @description `teamNumber` to search for within the results. */
          teamNumber?: number;
        };
        path: {
          /** @description Numeric year of the event from which the award listings are requested. Must be 4 digits */
          season: number;
          /** @description Case insensitive alphanumeric `eventCode` of the event from which the awards are requested. */
          eventCode: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["AwardsModel"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** Advancement */
    AdvancementModel: {
      /** @description The event code of the event this event advanced to. */
      advancesTo?: string | null;
      /**
       * Format: int32
       * @description The number of teams that advanced.
       */
      slots?: number;
      /** @description The ordered list of advancement criteria and teams that met them. Null if the event is unpublished. */
      advancement?: components["schemas"]["AdvancementSlot"][] | null;
    };
    /** Advancement Order */
    AdvancementSlot: {
      /**
       * Format: int32
       * @description The team number of the team earning this advancement slot. Null if no team meets the criteria.
       */
      team?: number | null;
      /** @description The display-friendly string representation of the number of the team earning this advancement slot. Null if no team meets the criteria. */
      displayTeam?: string | null;
      /**
       * Format: int32
       * @description The number of the advancement criteria as shown in GM1 section 6.2.
       */
      slot?: number;
      /** @description String describing the advancement criteria as shown in GM1 section 6.2. */
      criteria?: string | null;
      status?: components["schemas"]["ApiAdvancementStatus"];
    };
    /** Advanced */
    AdvancementSourceModel: {
      /** @description The event code of the event this team advanced from. Null if unknown. */
      advancedFrom?: string | null;
      /** @description The region code of the region this team advanced from. Null if target event is a region-level event. */
      advancedFromRegion?: string | null;
      /**
       * Format: int32
       * @description The number of teams that advanced from the source event.
       */
      slots?: number;
      /** @description The ordered list of advancement criteria and teams that met them. Null if the event is unpublished. */
      advancement?: components["schemas"]["AdvancementSlot"][] | null;
    };
    /** Alliance */
    AllianceModel_Version2: {
      /** Format: int32 */
      number?: number;
      name?: string | null;
      /** Format: int32 */
      captain?: number | null;
      captainDisplay?: string | null;
      /** Format: int32 */
      round1?: number | null;
      round1Display?: string | null;
      /** Format: int32 */
      round2?: number | null;
      round2Display?: string | null;
      /** Format: int32 */
      round3?: number | null;
      /** Format: int32 */
      backup?: number | null;
      /** Format: int32 */
      backupReplaced?: number | null;
    };
    /** Ultimate Goal Single Team Breakdown */
    AllianceScore_2020: {
      /** Format: int32 */
      adjust?: number;
      /** Format: int32 */
      dcPoints?: number;
      /** Format: int32 */
      autoPoints?: number;
      /** Format: int32 */
      dcTowerLow?: number;
      /** Format: int32 */
      dcTowerMid?: number;
      /** Format: int32 */
      dcTowerHigh?: number;
      navigated1?: boolean;
      navigated2?: boolean;
      wobbleDelivered1?: boolean;
      wobbleDelivered2?: boolean;
      /** Format: int32 */
      autoTowerLow?: number;
      /** Format: int32 */
      autoTowerMid?: number;
      /** Format: int32 */
      autoTowerHigh?: number;
      /** Format: int32 */
      autoTowerPoints?: number;
      autoPowerShotLeft?: boolean;
      autoPowerShotCenter?: boolean;
      autoPowerShotRight?: boolean;
      /** Format: int32 */
      autoPowerShotPoints?: number;
      /** Format: int32 */
      wobbleRings1?: number;
      /** Format: int32 */
      wobbleRings2?: number;
      /** Format: int32 */
      wobbleEnd1?: number;
      /** Format: int32 */
      wobbleEnd2?: number;
      /** Format: int32 */
      wobbleEndPoints?: number;
      /** Format: int32 */
      wobbleRingPoints?: number;
      /** Format: int32 */
      autoWobblePoints?: number;
      endPowerShotLeft?: boolean;
      endPowerShotCenter?: boolean;
      endPowerShotRight?: boolean;
      /** Format: int32 */
      endPowerShotPoints?: number;
      /** Format: int32 */
      penaltyPoints?: number;
      /** Format: int32 */
      majorPenalties?: number;
      /** Format: int32 */
      minorPenalties?: number;
      /** Format: int32 */
      navigationPoints?: number;
      /** Format: int32 */
      endgamePoints?: number;
      /** Format: int32 */
      totalPoints?: number;
    };
    /** Alliance Selection Details */
    AllianceSelectionDetailModel: {
      selections?: components["schemas"]["SelectionModel"][] | null;
      /** Format: int32 */
      count?: number;
    };
    /** Alliance Selection */
    AllianceSelectionModel_Version2: {
      alliances?: components["schemas"]["AllianceModel_Version2"][] | null;
      /** Format: int32 */
      count?: number;
    };
    /**
     * @description The advancement status describes how this team's appearance in this slot corresponds to the overall event advancement list. A value of "FIRST" represents the first time they appear and thus the criteria for which they would advance given enough available slots. "ALREADY_ADVANCED" means the team had already advanced to the target event prior to the start of this event. "ADVANCING_ABOVE" means this team has already met a higher-priority advancement criteria at this event."INELIGIBLE" means this team was not eligible to advance from this event.
     * @enum {string}
     */
    ApiAdvancementStatus: "NULL" | "FIRST" | "ALREADY_ADVANCING" | "ADVANCING_ABOVE" | "INELIGIBLE";
    /** API Information */
    ApiIndexModel: {
      /** @description api name */
      name?: string | null;
      /** @description api version */
      apiVersion?: string | null;
      serviceMainifestName?: string | null;
      serviceMainifestVersion?: string | null;
      codePackageName?: string | null;
      codePackageVersion?: string | null;
      status?: string | null;
      /**
       * Format: int32
       * @description current season in the eyes of FTC
       * @example 2020
       */
      currentSeason?: number;
      /**
       * Format: int32
       * @description max season that can be retrieved from the API/webpages
       * @example 2020
       */
      maxSeason?: number;
    };
    /** @enum {string} */
    AutoNavigatedStatus: "NONE" | "IN_STORAGE" | "COMPLETELY_IN_STORAGE" | "IN_WAREHOUSE" | "COMPLETELY_IN_WAREHOUSE";
    /** @enum {string} */
    AutoNavigation: "NONE" | "SUBSTATION_TERMINAL" | "SIGNAL_ZONE";
    /** Award Assignment */
    AwardAssignmentModel: {
      /** Format: int32 */
      awardId?: number;
      /** Format: int32 */
      teamId?: number | null;
      /** Format: int32 */
      teamProfileId?: number | null;
      /** Format: int32 */
      eventId?: number | null;
      /** Format: int32 */
      eventDivisionId?: number | null;
      eventCode?: string | null;
      name?: string | null;
      /** Format: int32 */
      series?: number;
      /** Format: int32 */
      teamNumber?: number | null;
      schoolName?: string | null;
      fullTeamName?: string | null;
      person?: string | null;
    };
    /** Award Assignment List */
    AwardsModel: {
      awards?: components["schemas"]["AwardAssignmentModel"][] | null;
    };
    /** @enum {string} */
    BarcodeElement: "DUCK" | "TEAM_SHIPPING_ELEMENT";
    Coordinate: {
      /** Format: double */
      x?: number;
      /** Format: double */
      y?: number;
      /** Format: double */
      z?: number;
      /** Format: double */
      m?: number;
      coordinateValue?: components["schemas"]["Coordinate"];
    };
    CoordinateEqualityComparer: Record<string, never>;
    CoordinateSequence: {
      /** Format: int32 */
      dimension?: number;
      /** Format: int32 */
      measures?: number;
      /** Format: int32 */
      spatial?: number;
      ordinates?: components["schemas"]["Ordinates"];
      hasZ?: boolean;
      hasM?: boolean;
      /** Format: int32 */
      zOrdinateIndex?: number;
      /** Format: int32 */
      mOrdinateIndex?: number;
      /** Format: int32 */
      count?: number;
    };
    CoordinateSequenceFactory: {
      ordinates?: components["schemas"]["Ordinates"];
    };
    /** @enum {string} */
    Dimension: "P" | "Curve" | "A" | "Collapse" | "Dontcare" | "True" | "Unknown";
    /** @enum {string} */
    EndGameLocation: "NONE" | "BACKSTAGE" | "RIGGING";
    /** @enum {string} */
    EndgameParkedStatus: "NONE" | "IN_WAREHOUSE" | "COMPLETELY_IN_WAREHOUSE";
    Envelope: {
      isNull?: boolean;
      /** Format: double */
      width?: number;
      /** Format: double */
      height?: number;
      /** Format: double */
      diameter?: number;
      /** Format: double */
      minX?: number;
      /** Format: double */
      maxX?: number;
      /** Format: double */
      minY?: number;
      /** Format: double */
      maxY?: number;
      /** Format: double */
      area?: number;
      /** Format: double */
      minExtent?: number;
      /** Format: double */
      maxExtent?: number;
      centre?: components["schemas"]["Coordinate"];
    };
    /** Match Result List */
    EventMatchResultsModel_Version2: {
      matches?: components["schemas"]["MatchResultModel_Version2"][] | null;
    };
    /** Event Ranking List */
    EventRankingsModel: {
      Rankings?: components["schemas"]["TeamRankingModel"][] | null;
    };
    /** Hybrid Schedule */
    EventScheduleHybridModel_Version2: {
      schedule?: components["schemas"]["ScheduleHybridModel_Version2"][] | null;
    };
    /** Scheduled Match List */
    EventScheduleModel_Version2: {
      schedule?: components["schemas"]["ScheduledMatchModel_Version2"][] | null;
    };
    /** @enum {string} */
    FieldSide: "SCORING_SIDE" | "AUDIENCE_SIDE";
    /** @enum {string} */
    FTCEventLevel: "OTHER" | "QUALIFICATION" | "SEMIFINAL" | "FINAL" | "PLAYOFF";
    Geometry: {
      coordinates?: (readonly components["schemas"]["Coordinate"][]) | null;
      /** Format: int32 */
      numPoints?: number;
      isEmpty?: boolean;
      dimension?: components["schemas"]["Dimension"];
      boundaryDimension?: components["schemas"]["Dimension"];
      coordinate?: components["schemas"]["Coordinate"];
      geometryType?: string | null;
      ogcGeometryType?: components["schemas"]["OgcGeometryType"];
      boundary?: components["schemas"]["Geometry"];
      factory?: components["schemas"]["GeometryFactory"];
      userData?: unknown;
      /** Format: int32 */
      srid?: number;
      precisionModel?: components["schemas"]["PrecisionModel"];
      /** Format: int32 */
      numGeometries?: number;
      isSimple?: boolean;
      isValid?: boolean;
      /** Format: double */
      area?: number;
      /** Format: double */
      length?: number;
      centroid?: components["schemas"]["Point"];
      interiorPoint?: components["schemas"]["Point"];
      pointOnSurface?: components["schemas"]["Point"];
      envelope?: components["schemas"]["Geometry"];
      envelopeInternal?: components["schemas"]["Envelope"];
      isRectangle?: boolean;
    };
    GeometryFactory: {
      precisionModel?: components["schemas"]["PrecisionModel"];
      coordinateSequenceFactory?: components["schemas"]["CoordinateSequenceFactory"];
      /** Format: int32 */
      srid?: number;
      geometryServices?: components["schemas"]["NtsGeometryServices"];
    };
    GeometryOverlay: Record<string, never>;
    /** @enum {string} */
    JunctionElement: "MY_CONE" | "OTHER_CONE" | "MY_R1_BEACON" | "MY_R2_BEACON" | "OTHER_R1_BEACON" | "OTHER_R2_BEACON";
    /** League Members */
    LeagueMemberListModel: {
      members?: number[] | null;
    };
    /** Match Result */
    MatchResultModel_Version2: {
      /** Format: date-time */
      actualStartTime?: string | null;
      description?: string | null;
      tournamentLevel?: string | null;
      /** Format: int32 */
      series?: number;
      /** Format: int32 */
      matchNumber?: number;
      /** Format: int32 */
      scoreRedFinal?: number;
      /** Format: int32 */
      scoreRedFoul?: number;
      /** Format: int32 */
      scoreRedAuto?: number;
      /** Format: int32 */
      scoreBlueFinal?: number;
      /** Format: int32 */
      scoreBlueFoul?: number;
      /** Format: int32 */
      scoreBlueAuto?: number;
      /** Format: date-time */
      postResultTime?: string | null;
      teams?: components["schemas"]["MatchResultTeamModel_Version2"][] | null;
      /** Format: date-time */
      modifiedOn?: string | null;
    };
    /** Match Result Team */
    MatchResultTeamModel_Version2: {
      /** Format: int32 */
      teamNumber?: number;
      station?: string | null;
      dq?: boolean;
      onField?: boolean;
    };
    /** Match Score List */
    MatchScoresModel: {
      MatchScores?: ((components["schemas"]["ScoreDetailModel_2019"] | components["schemas"]["ScoreDetailModel_2020"] | components["schemas"]["ScoreDetailModelSinglePlayer_2020"] | components["schemas"]["ScoreDetailModel_2021"] | components["schemas"]["ScoreDetailModelSinglePlayer_2021"] | components["schemas"]["ScoreDetailModel_2022"] | components["schemas"]["ScoreDetailModelSinglePlayer_2022"] | components["schemas"]["ScoreDetailModel_2023"] | components["schemas"]["ScoreDetailModelSinglePlayer_2023"])[]) | null;
    };
    NtsGeometryServices: {
      geometryOverlay?: components["schemas"]["GeometryOverlay"];
      coordinateEqualityComparer?: components["schemas"]["CoordinateEqualityComparer"];
      /** Format: int32 */
      defaultSRID?: number;
      defaultCoordinateSequenceFactory?: components["schemas"]["CoordinateSequenceFactory"];
      defaultPrecisionModel?: components["schemas"]["PrecisionModel"];
    };
    /** @enum {string} */
    OgcGeometryType: "Point" | "LineString" | "Polygon" | "MultiPoint" | "MultiLineString" | "MultiPolygon" | "GeometryCollection" | "CircularString" | "CompoundCurve" | "CurvePolygon" | "MultiCurve" | "MultiSurface" | "Curve" | "Surface" | "PolyhedralSurface" | "TIN";
    /** @enum {string} */
    Ordinates: "None" | "X" | "Y" | "XY" | "Spatial3" | "XYZ" | "Spatial4" | "Spatial5" | "Spatial6" | "Spatial7" | "Spatial8" | "Spatial9" | "Spatial10" | "Spatial11" | "Spatial12" | "Spatial13" | "Spatial14" | "Spatial15" | "Spatial16" | "AllSpatialOrdinates" | "Measure1" | "XYM" | "XYZM" | "Measure2" | "Measure3" | "Measure4" | "Measure5" | "Measure6" | "Measure7" | "Measure8" | "Measure9" | "Measure10" | "Measure11" | "Measure12" | "Measure13" | "Measure14" | "Measure15" | "Measure16" | "AllMeasureOrdinates" | "AllOrdinates";
    Point: {
      factory?: components["schemas"]["GeometryFactory"];
      userData?: unknown;
      /** Format: int32 */
      srid?: number;
      precisionModel?: components["schemas"]["PrecisionModel"];
      /** Format: int32 */
      numGeometries?: number;
      isSimple?: boolean;
      isValid?: boolean;
      /** Format: double */
      area?: number;
      /** Format: double */
      length?: number;
      centroid?: components["schemas"]["Point"];
      interiorPoint?: components["schemas"]["Point"];
      pointOnSurface?: components["schemas"]["Point"];
      envelope?: components["schemas"]["Geometry"];
      envelopeInternal?: components["schemas"]["Envelope"];
      isRectangle?: boolean;
      coordinateSequence?: components["schemas"]["CoordinateSequence"];
      coordinates?: (readonly components["schemas"]["Coordinate"][]) | null;
      /** Format: int32 */
      numPoints?: number;
      isEmpty?: boolean;
      dimension?: components["schemas"]["Dimension"];
      boundaryDimension?: components["schemas"]["Dimension"];
      /** Format: double */
      x?: number;
      /** Format: double */
      y?: number;
      coordinate?: components["schemas"]["Coordinate"];
      geometryType?: string | null;
      ogcGeometryType?: components["schemas"]["OgcGeometryType"];
      boundary?: components["schemas"]["Geometry"];
      /** Format: double */
      z?: number;
      /** Format: double */
      m?: number;
    };
    PrecisionModel: {
      isFloating?: boolean;
      /** Format: int32 */
      maximumSignificantDigits?: number;
      /** Format: double */
      scale?: number;
      precisionModelType?: components["schemas"]["PrecisionModels"];
    };
    /** @enum {string} */
    PrecisionModels: "Floating" | "FloatingSingle" | "Fixed";
    /** Scheduled Match */
    ScheduledMatchModel_Version2: {
      description?: string | null;
      field?: string | null;
      tournamentLevel?: string | null;
      /** Format: date-time */
      startTime?: string | null;
      /** Format: int32 */
      series?: number;
      /** Format: int32 */
      matchNumber?: number;
      teams?: components["schemas"]["ScheduledMatchTeamModel_Version2"][] | null;
      /** Format: date-time */
      modifiedOn?: string | null;
    };
    /** Scheduled Match Team */
    ScheduledMatchTeamModel_Version2: {
      /** Format: int32 */
      teamNumber?: number | null;
      displayTeamNumber?: string | null;
      station?: string | null;
      team?: string | null;
      teamName?: string | null;
      surrogate?: boolean;
      noShow?: boolean;
    };
    /** Hybrid Schedule Match */
    ScheduleHybridModel_Version2: {
      description?: string | null;
      tournamentLevel?: string | null;
      /** Format: int32 */
      series?: number;
      /** Format: int32 */
      matchNumber?: number;
      /** Format: date-time */
      startTime?: string | null;
      /** Format: date-time */
      actualStartTime?: string | null;
      /** Format: date-time */
      postResultTime?: string | null;
      /** Format: int32 */
      scoreRedFinal?: number | null;
      /** Format: int32 */
      scoreRedFoul?: number | null;
      /** Format: int32 */
      scoreRedAuto?: number | null;
      /** Format: int32 */
      scoreBlueFinal?: number | null;
      /** Format: int32 */
      scoreBlueFoul?: number | null;
      /** Format: int32 */
      scoreBlueAuto?: number | null;
      /** Format: int32 */
      scoreBlueDriveControlled?: number | null;
      /** Format: int32 */
      scoreBlueEndgame?: number | null;
      redWins?: boolean | null;
      blueWins?: boolean | null;
      teams?: components["schemas"]["ScheduleHybridModelTeam_Version2"][] | null;
    };
    /** Hybrid Schedule Team */
    ScheduleHybridModelTeam_Version2: {
      /** Format: int32 */
      teamNumber?: number | null;
      displayTeamNumber?: string | null;
      station?: string | null;
      surrogate?: boolean;
      noShow?: boolean;
      dq?: boolean | null;
      onField?: boolean | null;
      teamName?: string | null;
    };
    /** Ultimate Goal Alliance Score Breakdown */
    ScoreDetailAllianceModel_2020: {
      /** Format: int32 */
      adjust?: number;
      /** Format: int32 */
      dcPoints?: number;
      /** Format: int32 */
      autoPoints?: number;
      /** Format: int32 */
      dcTowerLow?: number;
      /** Format: int32 */
      dcTowerMid?: number;
      /** Format: int32 */
      dcTowerHigh?: number;
      navigated1?: boolean;
      navigated2?: boolean;
      wobbleDelivered1?: boolean;
      wobbleDelivered2?: boolean;
      /** Format: int32 */
      autoTowerLow?: number;
      /** Format: int32 */
      autoTowerMid?: number;
      /** Format: int32 */
      autoTowerHigh?: number;
      /** Format: int32 */
      autoTowerPoints?: number;
      autoPowerShotLeft?: boolean;
      autoPowerShotCenter?: boolean;
      autoPowerShotRight?: boolean;
      /** Format: int32 */
      autoPowerShotPoints?: number;
      /** Format: int32 */
      wobbleRings1?: number;
      /** Format: int32 */
      wobbleRings2?: number;
      /** Format: int32 */
      wobbleEnd1?: number;
      /** Format: int32 */
      wobbleEnd2?: number;
      /** Format: int32 */
      wobbleEndPoints?: number;
      /** Format: int32 */
      wobbleRingPoints?: number;
      /** Format: int32 */
      autoWobblePoints?: number;
      endPowerShotLeft?: boolean;
      endPowerShotCenter?: boolean;
      endPowerShotRight?: boolean;
      /** Format: int32 */
      endPowerShotPoints?: number;
      /** Format: int32 */
      penaltyPoints?: number;
      /** Format: int32 */
      majorPenalties?: number;
      /** Format: int32 */
      minorPenalties?: number;
      /** Format: int32 */
      navigationPoints?: number;
      /** Format: int32 */
      endgamePoints?: number;
      /** Format: int32 */
      totalPoints?: number;
      alliance?: string | null;
      /** Format: int32 */
      team?: number;
    };
    /** Freight Frenzy Alliance Score Breakdown */
    ScoreDetailAllianceModel_2021: {
      alliance?: string | null;
      barcodeElement1?: components["schemas"]["BarcodeElement"];
      barcodeElement2?: components["schemas"]["BarcodeElement"];
      carousel?: boolean;
      autoNavigated1?: components["schemas"]["AutoNavigatedStatus"];
      autoNavigated2?: components["schemas"]["AutoNavigatedStatus"];
      autoBonus1?: boolean;
      autoBonus2?: boolean;
      /** Format: int32 */
      autoStorageFreight?: number;
      /** Format: int32 */
      autoFreight1?: number;
      /** Format: int32 */
      autoFreight2?: number;
      /** Format: int32 */
      autoFreight3?: number;
      /** Format: int32 */
      driverControlledStorageFreight?: number;
      /** Format: int32 */
      driverControlledFreight1?: number;
      /** Format: int32 */
      driverControlledFreight2?: number;
      /** Format: int32 */
      driverControlledFreight3?: number;
      /** Format: int32 */
      sharedFreight?: number;
      /** Format: int32 */
      endgameDelivered?: number;
      allianceBalanced?: boolean;
      sharedUnbalanced?: boolean;
      endgameParked1?: components["schemas"]["EndgameParkedStatus"];
      endgameParked2?: components["schemas"]["EndgameParkedStatus"];
      /** Format: int32 */
      capped?: number;
      /** Format: int32 */
      minorPenalties?: number;
      /** Format: int32 */
      majorPenalties?: number;
      /** Format: int32 */
      carouselPoints?: number;
      /** Format: int32 */
      autoNavigationPoints?: number;
      /** Format: int32 */
      autoFreightPoints?: number;
      /** Format: int32 */
      autoBonusPoints?: number;
      /** Format: int32 */
      driverControlledAllianceHubPoints?: number;
      /** Format: int32 */
      driverControlledSharedHubPoints?: number;
      /** Format: int32 */
      driverControlledStoragePoints?: number;
      /** Format: int32 */
      endgameDeliveryPoints?: number;
      /** Format: int32 */
      allianceBalancedPoints?: number;
      /** Format: int32 */
      sharedUnbalancedPoints?: number;
      /** Format: int32 */
      endgameParkingPoints?: number;
      /** Format: int32 */
      cappingPoints?: number;
      /** Format: int32 */
      autoPoints?: number;
      /** Format: int32 */
      driverControlledPoints?: number;
      /** Format: int32 */
      endgamePoints?: number;
      /** Format: int32 */
      penaltyPoints?: number;
      /** Format: int32 */
      totalPoints?: number;
    };
    /** Power Play Alliance Score Breakdown */
    ScoreDetailAllianceModel_2022: {
      sideOfField?: components["schemas"]["FieldSide"];
      initSignalSleeve1?: boolean;
      initSignalSleeve2?: boolean;
      robot1Auto?: components["schemas"]["AutoNavigation"];
      robot2Auto?: components["schemas"]["AutoNavigation"];
      /** Format: int32 */
      autoTerminal?: number;
      /** @description Two dimensional array of lists of items scored on junctions in autonomous. [0,0] is the upper-left corner of the field as viewed from the audience side of the field (V5). The array is indexed by row, then column. (e.g [0,4] is in the upper right corner of the field (Z5).) Each junction is stored bottom up (index 0 is the bottom-most element on the field). MY_* elements belong to the alliance whose score object the element appears in, OTHER_* elements belong to the opposing alliance. (e.g in a set of scores for the red alliance, MY_CONE is a red cone and OTHER_CONE is a blue cone.) For a complete example, if red.autoJunctions[4][0][1] is OTHER_CONE, there is a blue cone in the bottom left cornerof the field (V1) on top of one other cone. */
      autoJunctions?: components["schemas"]["JunctionElement"][][][] | null;
      /** @description Two dimensional array of lists of items scored on junctions in driver-controlled. [0,0] is the upper-left corner of the field as viewed from the audience side of the field (V5). The array is indexed by crow, then column. (e.g [0,4] is in the upper right corner of the field (Z5).) Each junction is stored bottom up (index 0 is the bottom-most element on the field). MY_* elements belong to the alliance whose score object the element appears in, OTHER_* elements belong to the opposing alliance. (e.g in a set of scores for the red alliance, MY_CONE is a red cone and OTHER_CONE is a blue cone.) *_R1_BEACON means the beacon scored by robot 1 on the corresponding alliance. For a complete example, if red.dcJunctions[4][0][1] is OTHER_CONE, there is a blue cone in the bottom left cornerof the field (V1) on top of one other cone. */
      dcJunctions?: components["schemas"]["JunctionElement"][][][] | null;
      /**
       * Format: int32
       * @description Number of Scored cones in the alliance-colored terminal on the side of the field closest to the alliance station.
       */
      dcTerminalNear?: number;
      /**
       * Format: int32
       * @description Number of Scored cones in the alliance-colored terminal on the side of the field opposite the alliance station.
       */
      dcTerminalFar?: number;
      egNavigated1?: boolean;
      egNavigated2?: boolean;
      /** Format: int32 */
      minorPenalties?: number;
      /** Format: int32 */
      majorPenalties?: number;
      /** Format: int32 */
      autoNavigationPoints?: number;
      /** Format: int32 */
      signalBonusPoints?: number;
      /** Format: int32 */
      autoJunctionConePoints?: number;
      /** Format: int32 */
      autoTerminalConePoints?: number;
      /** Format: int32 */
      dcJunctionConePoints?: number;
      /** Format: int32 */
      dcTerminalConePoints?: number;
      /** Format: int32 */
      ownershipPoints?: number;
      /** Format: int32 */
      circuitPoints?: number;
      /** Format: int32 */
      egNavigationPoints?: number;
      /** Format: int32 */
      autoPoints?: number;
      /** Format: int32 */
      dcPoints?: number;
      /** Format: int32 */
      endgamePoints?: number;
      /** Format: int32 */
      penaltyPointsCommitted?: number;
      /** Format: int32 */
      prePenaltyTotal?: number;
      /** @description Array of 4 cone counts scored by this alliance on ground, low, medium, and high junctions respectively, scored in autonomous. E.g. red.autoJunctionCones[2] is the total number of cones scored by red on medium-height junctions. */
      autoJunctionCones?: number[] | null;
      /** @description Array of 4 cone counts scored by this alliance on ground, low, medium, and high junctions respectively, scored in driver-controlled. E.g. red.dcJunctionCones[2] is the total number of cones scored by red on medium-height junctions. */
      dcJunctionCones?: number[] | null;
      /** Format: int32 */
      beacons?: number;
      /** Format: int32 */
      ownedJunctions?: number;
      circuit?: boolean;
      /** Format: int32 */
      totalPoints?: number;
      alliance?: string | null;
      /** Format: int32 */
      team?: number;
    };
    ScoreDetailAllianceModel_2023: {
      initTeamProp1?: boolean;
      initTeamProp2?: boolean;
      robot1Auto?: boolean;
      robot2Auto?: boolean;
      spikeMarkPixel1?: boolean;
      spikeMarkPixel2?: boolean;
      targetBackdropPixel1?: boolean;
      targetBackdropPixel2?: boolean;
      /** Format: int32 */
      autoBackdrop?: number;
      /** Format: int32 */
      autoBackstage?: number;
      /** Format: int32 */
      dcBackdrop?: number;
      /** Format: int32 */
      dcBackstage?: number;
      /** Format: int32 */
      mosaics?: number;
      /** Format: int32 */
      maxSetLine?: number;
      egRobot1?: components["schemas"]["EndGameLocation"];
      egRobot2?: components["schemas"]["EndGameLocation"];
      /** Format: int32 */
      drone1?: number;
      /** Format: int32 */
      drone2?: number;
      /** Format: int32 */
      minorPenalties?: number;
      /** Format: int32 */
      majorPenalties?: number;
      /** Format: int32 */
      autoNavigatingPoints?: number;
      /** Format: int32 */
      autoRandomizationPoints?: number;
      /** Format: int32 */
      autoBackstagePoints?: number;
      /** Format: int32 */
      autoBackdropPoints?: number;
      /** Format: int32 */
      dcBackdropPoints?: number;
      /** Format: int32 */
      dcBackstagePoints?: number;
      /** Format: int32 */
      mosaicPoints?: number;
      /** Format: int32 */
      setBonusPoints?: number;
      /** Format: int32 */
      egLocationPoints?: number;
      /** Format: int32 */
      egDronePoints?: number;
      /** Format: int32 */
      autoPoints?: number;
      /** Format: int32 */
      dcPoints?: number;
      /** Format: int32 */
      endgamePoints?: number;
      /** Format: int32 */
      penaltyPointsCommitted?: number;
      /** Format: int32 */
      prePenaltyTotal?: number;
      /** Format: int32 */
      totalPoints?: number;
      alliance?: string | null;
      /** Format: int32 */
      team?: number;
    };
    /** SkyStone Score Details */
    ScoreDetailModel_2019: {
      matchLevel?: components["schemas"]["FTCEventLevel"];
      /** Format: int32 */
      matchSeries?: number;
      /** Format: int32 */
      matchNumber?: number;
      alliances?: components["schemas"]["ScoreDetailModelAlliance_2019"][] | null;
    };
    /** Ultimate Goal Alliance Score Details */
    ScoreDetailModel_2020: {
      matchLevel?: components["schemas"]["FTCEventLevel"];
      /** Format: int32 */
      matchSeries?: number;
      /** Format: int32 */
      matchNumber?: number;
      alliances?: components["schemas"]["ScoreDetailAllianceModel_2020"][] | null;
    };
    /** Freight Frenzy Alliance Score Details */
    ScoreDetailModel_2021: {
      matchLevel?: components["schemas"]["FTCEventLevel"];
      /** Format: int32 */
      matchSeries?: number;
      /** Format: int32 */
      matchNumber?: number;
      /** Format: int32 */
      randomization?: number;
      alliances?: components["schemas"]["ScoreDetailAllianceModel_2021"][] | null;
    };
    /** Power Play Alliance Score Details */
    ScoreDetailModel_2022: {
      matchLevel?: components["schemas"]["FTCEventLevel"];
      /** Format: int32 */
      matchSeries?: number;
      /** Format: int32 */
      matchNumber?: number;
      /** Format: int32 */
      randomization?: number;
      alliances?: components["schemas"]["ScoreDetailAllianceModel_2022"][] | null;
    };
    ScoreDetailModel_2023: {
      matchLevel?: components["schemas"]["FTCEventLevel"];
      /** Format: int32 */
      matchSeries?: number;
      /** Format: int32 */
      matchNumber?: number;
      /** Format: int32 */
      randomization?: number;
      alliances?: components["schemas"]["ScoreDetailAllianceModel_2023"][] | null;
    };
    /** SkyStone Alliance Score Details */
    ScoreDetailModelAlliance_2019: {
      alliance?: string | null;
      robot1Navigated?: boolean;
      robot1Parked?: boolean;
      /** Format: int32 */
      robot1CapstoneLevel?: number;
      robot2Navigated?: boolean;
      robot2Parked?: boolean;
      /** Format: int32 */
      robot2CapstoneLevel?: number;
      autoStones?: components["schemas"]["Stone"][] | null;
      /** Format: int32 */
      autoDelivered?: number;
      /** Format: int32 */
      autoReturned?: number;
      firstReturnedIsSkystone?: boolean;
      /** Format: int32 */
      autoPlaced?: number;
      foundationRepositioned?: boolean;
      foundationMoved?: boolean;
      /** Format: int32 */
      driverControlledDelivered?: number;
      /** Format: int32 */
      driverControlledReturned?: number;
      /** Format: int32 */
      driverControlledPlaced?: number;
      /** Format: int32 */
      tallestSkyscraper?: number;
      /** Format: int32 */
      autoDeliveryPoints?: number;
      /** Format: int32 */
      autoPlacedPoints?: number;
      /** Format: int32 */
      autonomousPoints?: number;
      /** Format: int32 */
      repositionedPoints?: number;
      /** Format: int32 */
      navigationPoints?: number;
      /** Format: int32 */
      driverControlledDeliveryPoints?: number;
      /** Format: int32 */
      driverControlledPlacedPoints?: number;
      /** Format: int32 */
      skyscraperBonusPoints?: number;
      /** Format: int32 */
      capstonePoints?: number;
      /** Format: int32 */
      driverControlledPoints?: number;
      /** Format: int32 */
      parkingPoints?: number;
      /** Format: int32 */
      endGamePoints?: number;
      /** Format: int32 */
      minorPenalties?: number;
      /** Format: int32 */
      majorPenalties?: number;
      /** Format: int32 */
      penaltyPoints?: number;
      /** Format: int32 */
      totalPoints?: number;
    };
    /** Ultimate Goal Single Team Score Details */
    ScoreDetailModelSinglePlayer_2020: {
      matchLevel?: components["schemas"]["FTCEventLevel"];
      /** Format: int32 */
      matchNumber?: number;
      /** Format: int32 */
      teamNumber?: number;
      scores?: components["schemas"]["AllianceScore_2020"];
    };
    /** Freight Frenzy Single Team Score Details */
    ScoreDetailModelSinglePlayer_2021: {
      matchLevel?: components["schemas"]["FTCEventLevel"];
      /** Format: int32 */
      matchNumber?: number;
      /** Format: int32 */
      randomization?: number;
      /** Format: int32 */
      teamNumber?: number;
      scores?: components["schemas"]["ScoreDetailSinglePlayer_2021"];
    };
    /** Power Play Single Team Score Details */
    ScoreDetailModelSinglePlayer_2022: {
      matchLevel?: components["schemas"]["FTCEventLevel"];
      /** Format: int32 */
      matchNumber?: number;
      /** Format: int32 */
      randomization?: number;
      /** Format: int32 */
      teamNumber?: number;
      scores?: components["schemas"]["ScoreDetailSinglePlayer_2022"];
    };
    ScoreDetailModelSinglePlayer_2023: {
      /** Format: int32 */
      teamNumber?: number;
      scores?: components["schemas"]["ScoreDetailSinglePlayer_2023"];
    };
    /** Freight Frenzy Remote Score Breakdown */
    ScoreDetailSinglePlayer_2021: {
      barcodeElement?: components["schemas"]["BarcodeElement"];
      carousel?: boolean;
      autoNavigated?: components["schemas"]["AutoNavigatedStatus"];
      autoBonus?: boolean;
      /** Format: int32 */
      autoStorageFreight?: number;
      /** Format: int32 */
      autoFreight1?: number;
      /** Format: int32 */
      autoFreight2?: number;
      /** Format: int32 */
      autoFreight3?: number;
      /** Format: int32 */
      driverControlledStorageFreight?: number;
      /** Format: int32 */
      driverControlledFreight1?: number;
      /** Format: int32 */
      driverControlledFreight2?: number;
      /** Format: int32 */
      driverControlledFreight3?: number;
      /** Format: int32 */
      endgameDelivered?: number;
      allianceBalanced?: boolean;
      endgameParked?: components["schemas"]["EndgameParkedStatus"];
      /** Format: int32 */
      capped?: number;
      /** Format: int32 */
      minorPenalties?: number;
      /** Format: int32 */
      majorPenalties?: number;
      /** Format: int32 */
      carouselPoints?: number;
      /** Format: int32 */
      autoNavigationPoints?: number;
      /** Format: int32 */
      autoFreightPoints?: number;
      /** Format: int32 */
      autoBonusPoints?: number;
      /** Format: int32 */
      driverControlledAllianceHubPoints?: number;
      /** Format: int32 */
      driverControlledStoragePoints?: number;
      /** Format: int32 */
      endgameDeliveryPoints?: number;
      /** Format: int32 */
      allianceBalancedPoints?: number;
      /** Format: int32 */
      endgameParkingPoints?: number;
      /** Format: int32 */
      cappingPoints?: number;
      /** Format: int32 */
      autoPoints?: number;
      /** Format: int32 */
      driverControlledPoints?: number;
      /** Format: int32 */
      endgamePoints?: number;
      /** Format: int32 */
      penaltyPoints?: number;
      /** Format: int32 */
      totalPoints?: number;
    };
    /** Power Play Remote Score Breakdown */
    ScoreDetailSinglePlayer_2022: Record<string, never>;
    ScoreDetailSinglePlayer_2023: Record<string, never>;
    /** Award List */
    SeasonAwardListingsModel: {
      awards?: components["schemas"]["SeasonAwardsModel"][] | null;
    };
    /** Award */
    SeasonAwardsModel: {
      /** Format: int32 */
      awardId?: number;
      name?: string | null;
      description?: string | null;
      forPerson?: boolean;
    };
    /** Event List */
    SeasonEventListingsModel_Version2: {
      events?: components["schemas"]["SeasonEventModel_Version2"][] | null;
      /** Format: int32 */
      eventCount?: number;
    };
    /** Event */
    SeasonEventModel_Version2: {
      /** Format: uuid */
      eventId?: string;
      code?: string | null;
      divisionCode?: string | null;
      name?: string | null;
      remote?: boolean;
      hybrid?: boolean;
      /** Format: int32 */
      fieldCount?: number;
      published?: boolean;
      type?: string | null;
      typeName?: string | null;
      regionCode?: string | null;
      leagueCode?: string | null;
      districtCode?: string | null;
      venue?: string | null;
      address?: string | null;
      city?: string | null;
      stateprov?: string | null;
      country?: string | null;
      website?: string | null;
      liveStreamUrl?: string | null;
      coordinates?: components["schemas"]["Point"];
      webcasts?: string[] | null;
      timezone?: string | null;
      /** Format: date-time */
      dateStart?: string;
      /** Format: date-time */
      dateEnd?: string;
    };
    /** League List */
    SeasonLeagueListingsModel_Version2: {
      leagues?: components["schemas"]["SeasonLeagueModel_Version2"][] | null;
      /** Format: int32 */
      leagueCount?: number;
    };
    /** League */
    SeasonLeagueModel_Version2: {
      region?: string | null;
      code?: string | null;
      name?: string | null;
      parentLeagueCode?: string | null;
      location?: string | null;
    };
    /** Season Summary */
    SeasonSummaryModel_Version2: {
      /** Format: int32 */
      eventCount?: number;
      gameName?: string | null;
      /** Format: date-time */
      kickoff?: string | null;
      /** Format: int32 */
      rookieStart?: number;
      /** Format: int32 */
      teamCount?: number;
      frcChampionships?: components["schemas"]["SeasonSummaryModelChampionship"][] | null;
    };
    /** Summary Championship Description */
    SeasonSummaryModelChampionship: {
      name?: string | null;
      /** Format: date-time */
      startDate?: string | null;
      location?: string | null;
    };
    /** Team List */
    SeasonTeamListingsModel_Version2: {
      teams?: components["schemas"]["SeasonTeamModel_Version2"][] | null;
      /** Format: int32 */
      teamCountTotal?: number;
      /** Format: int32 */
      teamCountPage?: number;
      /** Format: int32 */
      pageCurrent?: number;
      /** Format: int32 */
      pageTotal?: number;
    };
    /** Team */
    SeasonTeamModel_Version2: {
      /** Format: int32 */
      teamNumber?: number;
      displayTeamNumber?: string | null;
      nameFull?: string | null;
      nameShort?: string | null;
      schoolName?: string | null;
      city?: string | null;
      stateProv?: string | null;
      country?: string | null;
      website?: string | null;
      /** Format: int32 */
      rookieYear?: number | null;
      robotName?: string | null;
      districtCode?: string | null;
      homeCMP?: string | null;
      homeRegion?: string | null;
    };
    /** Selection */
    SelectionModel: {
      /** Format: int32 */
      index?: number;
      /** Format: int32 */
      team?: number;
      result?: components["schemas"]["SelectionResult"];
    };
    /** @enum {string} */
    SelectionResult: "ACCEPT" | "DECLINE" | "CAPTAIN";
    /** @enum {string} */
    Stone: "NONE" | "STONE" | "SKYSTONE";
    /** Team Ranking */
    TeamRankingModel: {
      /** Format: int32 */
      rank?: number;
      /** Format: int32 */
      teamNumber?: number;
      displayTeamNumber?: string | null;
      teamName?: string | null;
      /** Format: double */
      sortOrder1?: number;
      /** Format: double */
      sortOrder2?: number;
      /** Format: double */
      sortOrder3?: number;
      /** Format: double */
      sortOrder4?: number;
      /** Format: double */
      sortOrder5?: number;
      /** Format: double */
      sortOrder6?: number;
      /** Format: int32 */
      wins?: number;
      /** Format: int32 */
      losses?: number;
      /** Format: int32 */
      ties?: number;
      /** Format: double */
      qualAverage?: number;
      /** Format: int32 */
      dq?: number;
      /** Format: int32 */
      matchesPlayed?: number;
      /** Format: int32 */
      matchesCounted?: number;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
